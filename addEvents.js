const Moralis = require("moralis/node");
require("dotenv").config();
const contractAddresses = require("./constants/networkMapping.json");

let chainId = process.env.chainId || 31337;
let moralisChainId = chainId == "31337" ? "1337" : chainId;
const contractAddress = contractAddresses[chainId]["NftMarketplace"][0];
const serverUrl = process.env.NEXT_PUBLIC_SERVER_URL;
const appId = process.env.NEXT_PUBLIC_APP_ID;
const masterKey = process.env.masterKey;

// docs: https://docs.moralis.io/moralis-dapp/connect-the-sdk/connect-using-node#add-new-event-sync-from-code
// if we go to View Details -> Sync -> Sync and Watch Contract Events we can see the properties we need in the options objects
async function main() {
	await Moralis.start({ serverUrl, appId, masterKey });
	console.log(`Working with contract address ${contractAddress}`);

	let itemListedOptions = {
		// Moralis understands a local chain is 1337
		chainId: moralisChainId,
		sync_historical: true,
		// the topic is basically the signature of the event: name and parameter types
		topic: "ItemListed(address,address,uint256,uint256)",
		// abi of just the event; we can get this from the abi generated by the deploy
		abi: {
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "seller",
					type: "address",
				},
				{
					indexed: true,
					internalType: "address",
					name: "nftAddress",
					type: "address",
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "tokenId",
					type: "uint256",
				},
				{
					indexed: false,
					internalType: "uint256",
					name: "price",
					type: "uint256",
				},
			],
			name: "ItemListed",
			type: "event",
		},
		address: contractAddress,
		// name of the table in the Moralis database (dashboard)
		tableName: "ItemListed",
	};

	let itemBoughtOptions = {
		// Moralis understands a local chain is 1337
		chainId: moralisChainId,
		sync_historical: true,
		// the topic is basically the signature of the event: name and parameter types
		topic: "ItemBought(address,address,uint256,uint256)",
		// abi of just the event; we can get this from the abi generated by the deploy
		abi: {
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "buyer",
					type: "address",
				},
				{
					indexed: true,
					internalType: "address",
					name: "nftAddress",
					type: "address",
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "tokenId",
					type: "uint256",
				},
				{
					indexed: false,
					internalType: "uint256",
					name: "price",
					type: "uint256",
				},
			],
			name: "ItemBought",
			type: "event",
		},
		address: contractAddress,
		// name of the table in the Moralis database (dashboard)
		tableName: "ItemBought",
	};

	let itemCanceledOptions = {
		// Moralis understands a local chain is 1337
		chainId: moralisChainId,
		sync_historical: true,
		// the topic is basically the signature of the event: name and parameter types
		topic: "ItemCanceled(address,address,uint256)",
		// abi of just the event; we can get this from the abi generated by the deploy
		abi: {
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "seller",
					type: "address",
				},
				{
					indexed: true,
					internalType: "address",
					name: "nftAddress",
					type: "address",
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "tokenId",
					type: "uint256",
				},
			],
			name: "ItemCanceled",
			type: "event",
		},
		address: contractAddress,
		// name of the table in the Moralis database (dashboard)
		tableName: "ItemCanceled",
	};

	const listedResponse = await Moralis.Cloud.run("watchContractEvent", itemListedOptions, {
		useMasterKey: true,
	});
	const boughtResponse = await Moralis.Cloud.run("watchContractEvent", itemBoughtOptions, {
		useMasterKey: true,
	});
	const canceledResponse = await Moralis.Cloud.run("watchContractEvent", itemCanceledOptions, {
		useMasterKey: true,
	});
	if (listedResponse.success && canceledResponse.success && boughtResponse.success) {
		console.log("Success! Database Updated with watching events!");
	} else {
		console.log("Something went wrong...");
	}
}

main()
	.then(() => process.exit(0))
	.catch((error) => {
		console.error(error);
		process.exit(1);
	});
